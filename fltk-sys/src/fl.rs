/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Widget {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Widget_Tracker {
    _unused: [u8; 0],
}
pub type Fl_Awake_Handler = ::core::option::Option<unsafe extern "C" fn(data: *mut libc::c_void)>;
pub type Fl_System_Handler = ::core::option::Option<
    unsafe extern "C" fn(ev: libc::c_int, data: *mut libc::c_void) -> libc::c_int,
>;
extern "C" {
    pub fn Fl_run() -> libc::c_int;
}
extern "C" {
    pub fn Fl_lock() -> libc::c_int;
}
extern "C" {
    pub fn Fl_unlock();
}
extern "C" {
    pub fn Fl_awake_callback(handler: Fl_Awake_Handler, data: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn Fl_awake();
}
extern "C" {
    pub fn Fl_set_scrollbar_size(arg1: libc::c_int);
}
extern "C" {
    pub fn Fl_scrollbar_size() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_key() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_key_down(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_text() -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_event_button() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_clicks() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_x() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_y() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_x_root() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_y_root() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_dx() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_dy() -> libc::c_int;
}
extern "C" {
    pub fn Fl_get_mouse(arg1: *mut libc::c_int, arg2: *mut libc::c_int);
}
extern "C" {
    pub fn Fl_event_is_click() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_length() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_state() -> libc::c_int;
}
extern "C" {
    pub fn Fl_screen_x() -> libc::c_int;
}
extern "C" {
    pub fn Fl_screen_y() -> libc::c_int;
}
extern "C" {
    pub fn Fl_screen_h() -> libc::c_int;
}
extern "C" {
    pub fn Fl_screen_w() -> libc::c_int;
}
extern "C" {
    pub fn Fl_paste_text(arg1: *mut Fl_Widget, src: libc::c_int);
}
extern "C" {
    pub fn Fl_paste_image(arg1: *mut Fl_Widget, src: libc::c_int);
}
extern "C" {
    pub fn Fl_set_scheme(scheme: *const libc::c_char);
}
extern "C" {
    pub fn Fl_scheme() -> libc::c_int;
}
extern "C" {
    pub fn Fl_scheme_string() -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_visible_focus() -> libc::c_int;
}
extern "C" {
    pub fn Fl_set_visible_focus(arg1: libc::c_int);
}
extern "C" {
    pub fn Fl_set_box_type(arg1: libc::c_int, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_get_rgb_color(r: libc::c_uchar, g: libc::c_uchar, b: libc::c_uchar) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_set_color(c: libc::c_uint, r: libc::c_uchar, g: libc::c_uchar, b: libc::c_uchar);
}
extern "C" {
    pub fn Fl_get_font(idx: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_set_fonts(c: *const libc::c_char) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_set_font(arg1: libc::c_int, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_set_font2(arg1: libc::c_int, arg2: *const libc::c_char);
}
extern "C" {
    pub fn Fl_set_font_size(arg1: libc::c_int);
}
extern "C" {
    pub fn Fl_add_handler(
        ev_handler: ::core::option::Option<unsafe extern "C" fn(ev: libc::c_int) -> libc::c_int>,
    );
}
extern "C" {
    pub fn Fl_awake_msg(msg: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_thread_msg() -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_wait() -> libc::c_int;
}
extern "C" {
    pub fn Fl_wait_for(arg1: f64) -> f64;
}
extern "C" {
    pub fn Fl_add_timeout(
        t: f64,
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg2: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_repeat_timeout(
        t: f64,
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg2: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_remove_timeout(
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg2: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_has_timeout(
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg2: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_dnd() -> libc::c_int;
}
extern "C" {
    pub fn Fl_grab() -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_set_grab(arg1: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_first_window() -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_next_window(arg1: *const libc::c_void) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_should_program_quit() -> libc::c_int;
}
extern "C" {
    pub fn Fl_program_should_quit(flag: libc::c_int);
}
extern "C" {
    pub fn Fl_event_inside(
        arg1: libc::c_int,
        arg2: libc::c_int,
        arg3: libc::c_int,
        arg4: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_belowmouse() -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_delete_widget(w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_Tracker_new(w: *mut Fl_Widget) -> *mut Fl_Widget_Tracker;
}
extern "C" {
    pub fn Fl_Widget_Tracker_deleted(self_: *mut Fl_Widget_Tracker) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_Tracker_delete(self_: *mut Fl_Widget_Tracker);
}
extern "C" {
    pub fn Fl_init_all();
}
extern "C" {
    pub fn Fl_redraw();
}
extern "C" {
    pub fn Fl_event_shift() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_ctrl() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_command() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_alt() -> libc::c_int;
}
extern "C" {
    pub fn Fl_set_damage(flag: libc::c_int);
}
extern "C" {
    pub fn Fl_damage() -> libc::c_int;
}
extern "C" {
    pub fn Fl_visual(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_own_colormap();
}
extern "C" {
    pub fn Fl_pushed() -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_focus() -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_set_focus(arg1: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_version() -> f64;
}
extern "C" {
    pub fn Fl_api_version() -> libc::c_int;
}
extern "C" {
    pub fn Fl_abi_version() -> libc::c_int;
}
extern "C" {
    pub fn Fl_load_font(path: *const libc::c_char) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_unload_font(path: *const libc::c_char);
}
extern "C" {
    pub fn Fl_foreground(r: libc::c_uchar, g: libc::c_uchar, b: libc::c_uchar);
}
extern "C" {
    pub fn Fl_background(r: libc::c_uchar, g: libc::c_uchar, b: libc::c_uchar);
}
extern "C" {
    pub fn Fl_background2(r: libc::c_uchar, g: libc::c_uchar, b: libc::c_uchar);
}
extern "C" {
    pub fn Fl_selection_color(r: libc::c_uchar, g: libc::c_uchar, b: libc::c_uchar);
}
extern "C" {
    pub fn Fl_inactive_color(r: libc::c_uchar, g: libc::c_uchar, b: libc::c_uchar);
}
extern "C" {
    pub fn Fl_get_system_colors();
}
extern "C" {
    pub fn Fl_handle(arg1: libc::c_int, arg2: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn Fl_handle_(arg1: libc::c_int, arg2: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn Fl_add_idle(
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg2: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_has_idle(
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg2: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_remove_idle(
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg2: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_flush();
}
extern "C" {
    pub fn Fl_set_screen_scale(n: libc::c_int, val: f32);
}
extern "C" {
    pub fn Fl_screen_scale(n: libc::c_int) -> f32;
}
extern "C" {
    pub fn Fl_screen_scaling_supported() -> libc::c_int;
}
extern "C" {
    pub fn Fl_screen_count() -> libc::c_int;
}
extern "C" {
    pub fn Fl_screen_num(x: libc::c_int, y: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_screen_xywh(
        X: *mut libc::c_int,
        Y: *mut libc::c_int,
        W: *mut libc::c_int,
        H: *mut libc::c_int,
        n: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_screen_dpi(h: *mut f32, v: *mut f32, n: libc::c_int);
}
extern "C" {
    pub fn Fl_screen_work_area(
        X: *mut libc::c_int,
        Y: *mut libc::c_int,
        W: *mut libc::c_int,
        H: *mut libc::c_int,
        n: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_open_display();
}
extern "C" {
    pub fn Fl_close_display();
}
extern "C" {
    pub fn Fl_box_dx(boxtype: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_box_dy(boxtype: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_box_dw(boxtype: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_box_dh(boxtype: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_mac_os_version() -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_clipboard() -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_event_clipboard_type() -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_clipboard_contains(typ: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn Fl_event_dispatch(
        cb: ::core::option::Option<
            unsafe extern "C" fn(event: libc::c_int, arg1: *mut libc::c_void) -> libc::c_int,
        >,
    );
}
extern "C" {
    pub fn Fl_add_system_handler(handler: Fl_System_Handler, data: *mut libc::c_void);
}
